function mute () {
  const elems = document.querySelectorAll('video, audio')
  ;[].forEach.call(elems, function (elem) {
    elem.muted = true
    elem.pause()
  })
  return false
}

let init = true
window.setInterval(() => {
  const waitForCompleteState = setInterval(function () {
    if (document.readyState === 'complete') {
      clearInterval(waitForCompleteState)
    }
  }, 500)
  if (init) {
    init = mute()
  }
  const b = document.getElementById('playbackControlBar').children
  const p = document.getElementById('progressBar')
  const f = document.getElementById('footerPlayer')
  !JSON.parse(b[0].ariaChecked) && b[0].click()
  !b[4].dataset.type.endsWith('All') && b[4].click()
  if (f.dataset.testPlaybackState.match(/stalled/i) !== null) {
    b[2].lastChild.click()
  } else {
    b[2].lastChild.dataset.test === 'play' && b[2].lastChild.click()
  }
  p.ariaValueNow > Math.floor(Math.random() * (p.ariaValueMax - 35)) + 35 &&
    b[3].click()
}, 2000)